import 'dotenv/config'
import NewServer from "../../proto/autogenerated/ts/express_server.js"

import GetServerMethods from '../services/serverMethods/index.js'
import serverOptions from '../auth.js';
import Main, { LoadMainSettingsFromEnv } from '../services/main/index.js'
import Storage from '../services/storage/index.js'
import supertest from 'supertest';
import * as Types from "../../proto/autogenerated/ts/types";
import TestAgent from 'supertest/lib/agent.js';



const mainSettings = LoadMainSettingsFromEnv(true);
const storageManager = new Storage(mainSettings.storageSettings)

export const mainHandler = new Main(mainSettings, storageManager);
const serverMethods = GetServerMethods(mainHandler)




const { app } = NewServer(serverMethods, serverOptions(mainHandler));
export const testApi = supertest(app)


export const mockUsers = [
	{
		identifier: "mock_user_1",
		balance: 6000
	},
	{
		identifier: "mock_user_2",
		balance: 10000 // 10k
	}
];

export const applicationName = "test-application";
export const getApp = async (authToken: string) => {
	const res = await testApi
		.post("/api/app/get")
		.set("Authorization", authToken);
	
		return res;
	
}

export const getPubUser = async (authToken: string, userIdentifier: string) => {
	const res = await testApi
		.post("/api/app/user/get")
		.send({ user_identifier: userIdentifier })
		.set("Authorization", authToken);
	return res;
}

export const getAppInvoice = async (authToken: string, userIdentifier: string, amount: number) => {
	const newInvoiceRes = await testApi
		.post("/api/app/add/invoice")
		.send({
			payer_identifier: userIdentifier,
			http_callback_url: "none",
			invoice_req: {
				amountSats: amount,
				memo: "test"
			}
		})
		.set("Authorization", authToken);
	return newInvoiceRes;
}

export const getAppUserInvoice = async (authToken: string, receiverIdentifier: string, payer_identifier: string, amount: number) => {
	const newInvoiceRes = await testApi
		.post("/api/app/user/add/invoice")
		.send({
			receiver_identifier: mockUsers[1].identifier,
			payer_identifier: mockUsers[0].identifier,
			http_callback_url: "none",
			invoice_req: {
				amountSats: amount,
				memo: "test"
			}
		})
		.set("Authorization", authToken);
	return newInvoiceRes;
}

export const payInvoice = async (authToken: string, userIdentifier: string, invoice: string) => {
	const payInvoiceRes = await testApi
		.post("/api/app/invoice/pay")
		.send({
			user_identifier: userIdentifier,
			invoice: invoice,
			amount: 0
		})
		.set("Authorization", authToken);
	return payInvoiceRes;
}