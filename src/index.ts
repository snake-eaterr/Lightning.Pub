import 'dotenv/config'
import NewServer from '../proto/autogenerated/ts/express_server.js'
import GetServerMethods from './services/serverMethods/index.js'
import serverOptions from './auth.js';
import Main, { LoadMainSettingsFromEnv } from './services/main/index.js'
import Storage from './services/storage/index.js'
import { LoadNosrtSettingsFromEnv } from './services/nostr/index.js'
import nostrMiddleware from './nostrMiddleware.js'
import { TypeOrmMigrationRunner } from './services/storage/migrations/runner.js';
import { getLogger } from './services/helpers/logger.js';
import { ServerMethods } from '../proto/autogenerated/ts/types.js';

const attachNostr = async (mainHandler: Main, serverMethods: ServerMethods) => {
	const nostrSettings = LoadNosrtSettingsFromEnv()
	const appsData = await mainHandler.storage.applicationStorage.GetApplications()
	const apps = await Promise.all(appsData.map(app => {
		if (!app.nostr_private_key || !app.nostr_public_key) { // TMP --
			return mainHandler.storage.applicationStorage.GenerateApplicationKeys(app);
		} // --
		else {
			return { privateKey: app.nostr_private_key, publicKey: app.nostr_public_key, appId: app.app_id, name: app.name }
		}
	}))
	const { Send } = nostrMiddleware(serverMethods, mainHandler, { ...nostrSettings, apps })
  mainHandler.attachNostrSend(Send);
	return apps;
}

const start = async () => {
    const log = getLogger({})
    const mainSettings = LoadMainSettingsFromEnv(process.env.NODE_ENV === "test" ? true : false)
    const storageManager = new Storage(mainSettings.storageSettings)
    const manualMigration = await TypeOrmMigrationRunner(log, storageManager, mainSettings.storageSettings.dbSettings, process.argv[2])
    if (manualMigration) {
        log("migrations run sucessfully, exiting")
        return
    }
    const mainHandler = new Main(mainSettings, storageManager)
    await mainHandler.lnd.Warmup()
    const serverMethods = GetServerMethods(mainHandler);
		if (process.env.NODE_ENV !== "test") {
			await attachNostr(mainHandler, serverMethods);
		}
    
    const Server = NewServer(serverMethods, serverOptions(mainHandler))
    if (process.argv[2] === 'unlock') {
        const u = process.argv[3]
        if (u) {
            console.log("unlocking user", u)
            await mainHandler.storage.userStorage.UnlockUser(u)
        } else {
            console.log("no user id found to unlock")
        }
    }
		if (process.env.NODE_ENV === "test") {
			console.log("Registering test endpoints")
			Server.app.get("/api/testing/db/reset", async (_, res) => {
				console.log("GOT in-memory db reset request")
				await mainHandler.storage.Disconnect();
				await mainHandler.storage.Connect([]);
				const authApp = await mainHandler.applicationManager.AddApp({ name: "test-application", allow_user_creation: true });
				const apps = await attachNostr(mainHandler, serverMethods);
				res.json({ auth_token: authApp.auth_token, pub_key: apps[0].publicKey })
			})
		}
    Server.Listen(mainSettings.servicePort)
}
start()
